{"version":3,"sources":["images/cartoon-wallet.png","reducers/user.js","actions/actionTypes.js","reducers/aux.js","reducers/wallet.js","reducers/index.js","store/index.js","actions/index.js","components/LoginFormComponent.js","pages/Login.js","components/Button.js","components/ExpanseTable.js","components/SectionTable.js","components/ValueDescriptionCoin.js","pages/Wallet.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","INITIAL_STATE","email","user","state","action","type","payload","receivedCurrenciesCase","currencies","error","expenses","id","totalExpenses","update","wallet","value","description","currency","method","tag","exchangeRates","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","errorFetch","LoginFormComponent","emailEnableButton","passwordEnableButton","handleClick","to","className","disabled","this","enableOrDisableSubmitButton","onClick","props","emailInput","handleChange","passwordInput","htmlFor","data-testid","name","onChange","placeholder","required","minLength","renderButtonLink","React","Component","Login","bind","target","setState","match","length","sendLoginForm","src","RightImage","alt","connect","dispatch","Button","data","returnButton","ExpanseTable","deletePurchase","filter","a","updateMode","parseFloat","split","ask","toFixed","Math","round","newList","actionUpadateMode","SectionTable","map","expanse","index","key","ValueDescriptionCoin","arrayCurrencies","renderValueDescriptionCoin","removeItem","item","Wallet","renderForm","renderHeader","setInputstoEdit","updateItems","requestCurrencies","nextProps","newState","requestQuotation","prevState","addButton","editButton","updatePurchase","reduce","acumulator","currentValue","renderPayMethod","totalAmount","defaultProps","accumulator","fetch","then","response","json","catch","actionReceiveQuotation","receivedCurrencies","Object","keys","App","basename","process","path","render","exact","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.7160e940.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cartoon-wallet.b15e3dfb.png\";","import { LOGIN_FORM } from '../actions/actionTypes';\n\nconst INITIAL_STATE = {\n  email: '',\n};\n\nfunction user(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case LOGIN_FORM:\n    return {\n      ...state,\n      email: action.payload,\n    };\n  default:\n    return state;\n  }\n}\n\nexport default user;\n","export const DELETE_ITEMS = 'DELETE_ITEMS';\nexport const FETCH_ERROR = 'FETCH_ERROR';\nexport const LOGIN_FORM = 'LOGIN_FORM';\nexport const REQUEST_CURRENCIES = 'REQUEST_CURRENCIES';\nexport const REQUEST_QUOTATION = 'REQUEST_QUOTATION';\nexport const RECEIVED_CURRENCIES = 'RECEIVED_CURRENCIES';\nexport const RECEIVED_QUOTATION = 'RECEIVED_QUOTATION';\nexport const UPDATE_ITEMS_MODE = 'UPDATE_ITEMS_MODE';\nexport const UPDATE_ITEMS = 'UPDATE_ITEMS';\n","const receivedCurrenciesCase = (state, currencies) => (\n  {\n    ...state,\n    currencies,\n  }\n);\n\nexport default receivedCurrenciesCase;\n","import { DELETE_ITEMS, FETCH_ERROR, RECEIVED_CURRENCIES,\n  RECEIVED_QUOTATION, UPDATE_ITEMS, UPDATE_ITEMS_MODE } from '../actions/actionTypes';\nimport receivedCurrenciesCase from './aux';\n\nconst INITIAL_STATE = {\n  currencies: [],\n  error: '',\n  expenses: [],\n  id: 0,\n  totalExpenses: 0,\n  update: false,\n};\n\nfunction wallet(state = INITIAL_STATE, {\n  payload,\n  type,\n  error, value, description, currency = 'USD', currencies, method, tag, id }) {\n  switch (type) {\n  case FETCH_ERROR:\n    return {\n      ...state,\n      error,\n    };\n  case RECEIVED_CURRENCIES:\n    return receivedCurrenciesCase(state, currencies);\n  case RECEIVED_QUOTATION:\n    return {\n      ...state,\n      expenses: [...state.expenses,\n        { exchangeRates: payload,\n          id,\n          value,\n          description,\n          currency,\n          method,\n          tag,\n        }],\n    };\n  case UPDATE_ITEMS_MODE:\n    return {\n      ...state,\n      update: true,\n      id,\n    };\n  case UPDATE_ITEMS:\n    return {\n      ...state,\n      expenses: payload,\n      update: false,\n    };\n  case DELETE_ITEMS:\n    return {\n      ...state,\n      expenses: payload,\n    };\n  default:\n    return state;\n  }\n}\n\nexport default wallet;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\nconst rootReducer = combineReducers({ user, wallet });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport default store;\n","import { DELETE_ITEMS, RECEIVED_QUOTATION,\n  RECEIVED_CURRENCIES,\n  FETCH_ERROR, LOGIN_FORM, UPDATE_ITEMS, UPDATE_ITEMS_MODE } from './actionTypes';\n\nexport const actionSendLoginFormData = (payload) => ({\n  type: LOGIN_FORM,\n  payload,\n});\n\nexport const receivedCurrencies = (currencies) => ({\n  type: RECEIVED_CURRENCIES,\n  currencies,\n});\n\nexport const\n  receivedQuotation = (payload, { id, value, description, currency, method, tag }) => ({\n    type: RECEIVED_QUOTATION,\n    payload,\n    id,\n    value,\n    description,\n    currency,\n    method,\n    tag,\n  });\n\nconst errorFetch = (error) => ({\n  type: FETCH_ERROR,\n  error,\n});\n\nexport const actionDeletePurchaseItems = (payload) => ({\n  type: DELETE_ITEMS,\n  payload,\n});\n\nexport const actionUpadateMode = (id) => ({\n  type: UPDATE_ITEMS_MODE,\n  id,\n});\n\nexport const actionUpadatePurchase = (payload) => ({\n  type: UPDATE_ITEMS,\n  payload,\n});\n\nexport function actionRequestCurrencies() {\n  return (dispatch) => {\n    fetch('https://economia.awesomeapi.com.br/json/all')\n      .then((response) => response.json())\n      .then((currencies) => dispatch(receivedCurrencies(Object.keys(currencies))))\n      .catch((error = 'Falha na requisição') => dispatch(errorFetch(error)));\n  };\n}\n\nexport function actionReceiveQuotation(state) {\n  return (dispatch) => {\n    fetch('https://economia.awesomeapi.com.br/json/all')\n      .then((response) => response.json())\n      .then((currencies) => dispatch(receivedQuotation(currencies, state)))\n      .catch((error = 'Falha na requisição') => dispatch(errorFetch(error)));\n  };\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nclass LoginFormComponent extends React.Component {\n  enableOrDisableSubmitButton(emailEnableButton, passwordEnableButton) {\n    if (!emailEnableButton || !passwordEnableButton) {\n      return true;\n    }\n    return false;\n  }\n\n  renderButtonLink(emailEnableButton, handleClick, passwordEnableButton) {\n    return (\n      <Link to=\"/carteira\">\n        <button\n          className=\"submit-input-id\"\n          disabled={ this\n            .enableOrDisableSubmitButton(emailEnableButton, passwordEnableButton) }\n          id=\"submit-input-id\"\n          onClick={ handleClick }\n          type=\"button\"\n        >\n          Entrar\n        </button>\n      </Link>\n    );\n  }\n\n  render() {\n    const { emailEnableButton,\n      emailInput,\n      handleChange,\n      handleClick,\n      passwordEnableButton,\n      passwordInput } = this.props;\n    return (\n      <div className=\"form-container\">\n        <h1>Entrar</h1>\n        <form>\n          <fieldset className=\"fieldset-login-form\">\n            <label className=\"form-label email-label\" htmlFor=\"email-input-id\">\n              Email:\n              <input\n                className=\"form-control email-input-id\"\n                data-testid=\"email-input\"\n                id=\"email-input-id\"\n                name=\"emailInput\"\n                onChange={ handleChange }\n                placeholder=\"Email:\"\n                required\n                type=\"email\"\n                value={ emailInput }\n              />\n            </label>\n            <label className=\"form-label password-label\" htmlFor=\"password-input-id\">\n              Senha:\n              <input\n                className=\"form-control password-input-id\"\n                data-testid=\"password-input\"\n                id=\"password-input-id\"\n                minLength=\"6\"\n                name=\"passwordInput\"\n                onChange={ handleChange }\n                placeholder=\"Senha:\"\n                type=\"password\"\n                value={ passwordInput }\n              />\n            </label>\n            <div className=\"button-content\">\n              { this\n                .renderButtonLink(emailEnableButton, handleClick, passwordEnableButton) }\n            </div>\n          </fieldset>\n        </form>\n      </div>\n    );\n  }\n}\n\nLoginFormComponent.propTypes = {\n  emailEnableButton: PropTypes.bool.isRequired,\n  emailInput: PropTypes.string.isRequired,\n  handleChange: PropTypes.func.isRequired,\n  handleClick: PropTypes.func.isRequired,\n  passwordEnableButton: PropTypes.bool.isRequired,\n  passwordInput: PropTypes.string.isRequired,\n};\n\nexport default LoginFormComponent;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { actionSendLoginFormData } from '../actions';\nimport LoginFormComponent from '../components/LoginFormComponent';\n\nimport RightImage from '../images/cartoon-wallet.png';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      emailEnableButton: false,\n      emailInput: '',\n      passwordEnableButton: false,\n      passwordInput: '',\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleChange({ target: { name, value } }) {\n    this.setState({\n      [name]: value,\n    });\n    if (name === 'emailInput') {\n      const emailIsValid = value.match(/^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i);\n      if (emailIsValid) {\n        this.setState({\n          emailEnableButton: true,\n        });\n      }\n    } else if (name === 'passwordInput') {\n      const NUMBER = 6;\n      if (value.length >= NUMBER) {\n        this.setState({\n          passwordEnableButton: true,\n        });\n      }\n    }\n  }\n\n  handleClick() {\n    const { sendLoginForm } = this.props;\n    const { emailInput } = this.state;\n    sendLoginForm(emailInput);\n  }\n\n  render() {\n    const {\n      emailEnableButton,\n      emailInput,\n      passwordEnableButton,\n      passwordInput } = this.state;\n    return (\n      <div className=\"main-login\">\n        <div className=\"left-side\">\n          <img src={ RightImage } alt=\"Login\" />\n          <p>\n            Tenha o simples e rápido controle das suas despesas no TrybeWallet\n            <i className=\"fas fa-coins fa-lg coin\" />\n          </p>\n        </div>\n        <div className=\"right-side\">\n          <div className=\"top-text-content\">\n            <h2>Bem vindo ao TrybeWallet!!</h2>\n            <p>\n              Insira seu email e\n              senha para entrar (Nenhum dado será salvo - Site fictício)\n            </p>\n          </div>\n          <LoginFormComponent\n            emailEnableButton={ emailEnableButton }\n            emailInput={ emailInput }\n            handleChange={ this.handleChange }\n            handleClick={ this.handleClick }\n            passwordEnableButton={ passwordEnableButton }\n            passwordInput={ passwordInput }\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  sendLoginForm: (emailInput) => dispatch(actionSendLoginFormData(emailInput)),\n});\n\nLogin.propTypes = {\n  sendLoginForm: PropTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Button extends Component {\n  returnButton() {\n    const { data: { value, currency, method, tag }, name, onClick } = this.props;\n\n    if (value.length > 0 && currency.length > 0 && method.length > 0 && tag.length > 0) {\n      return (<input\n        className=\"btn btn-primary\"\n        type=\"button\"\n        value={ name }\n        onClick={ onClick }\n      />);\n    }\n    return (<input\n      className=\"btn btn-primary\"\n      type=\"button\"\n      value={ name }\n      onClick={ onClick }\n      disabled\n    />);\n  }\n\n  render() {\n    return this.returnButton();\n  }\n}\n\nButton.propTypes = {\n  data: PropTypes.shape({\n    value: PropTypes.string,\n    method: PropTypes.string,\n    tag: PropTypes.string,\n    currency: PropTypes.string,\n  }).isRequired,\n  name: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default Button;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { actionDeletePurchaseItems, actionUpadateMode } from '../actions';\n\nclass ExpanseTable extends Component {\n  constructor() {\n    super();\n    this.deletePurchase = this.deletePurchase.bind(this);\n  }\n\n  deletePurchase(id) {\n    const { deletePurchase, expenses } = this.props;\n    const newList = expenses.filter((a) => a.id !== id);\n    deletePurchase(newList);\n  }\n\n  updateMode(id) {\n    const { updateMode } = this.props;\n    updateMode(id);\n  }\n\n  render() {\n    const { data: {\n      value,\n      description,\n      method,\n      tag,\n      currency,\n      exchangeRates,\n      id,\n    } } = this.props;\n    return (\n      <tr className=\"line\">\n        <td>{description}</td>\n        <td>{tag}</td>\n        <td>{method}</td>\n        <td>{parseFloat(value)}</td>\n        <td>{exchangeRates[currency].name.split('/')[0]}</td>\n        <td>{parseFloat(exchangeRates[currency].ask).toFixed(2)}</td>\n        <td>{Math.round(parseFloat(exchangeRates[currency].ask * value) * 100) / 100}</td>\n        <td>Real</td>\n        <td>\n          <input\n            className=\"btn btn-warning\"\n            data-testid=\"edit-btn\"\n            id=\"edit-button\"\n            type=\"button\"\n            value=\"editar\"\n            onClick={ () => this.updateMode(id) }\n          />\n          <input\n            className=\"btn btn-danger\"\n            data-testid=\"delete-btn\"\n            type=\"button\"\n            value=\"excluir\"\n            onClick={ () => this.deletePurchase(id) }\n          />\n        </td>\n      </tr>\n    );\n  }\n}\n\nExpanseTable.propTypes = {\n  data: PropTypes.shape({\n    value: PropTypes.string,\n    description: PropTypes.string,\n    method: PropTypes.string,\n    tag: PropTypes.string,\n    currency: PropTypes.string,\n    id: PropTypes.number,\n    exchangeRates: PropTypes.shape({}),\n  }).isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.shape).isRequired,\n  deletePurchase: PropTypes.func.isRequired,\n  updateMode: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = ({ wallet: { expenses } }) => ({\n  expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  deletePurchase: (newList) => dispatch(actionDeletePurchaseItems(newList)),\n  updateMode: (id) => dispatch(actionUpadateMode(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExpanseTable);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ExpanseTable from './ExpanseTable';\n\nclass SectionTable extends React.Component {\n  render() {\n    const { expenses } = this.props;\n    return (\n      <table className=\"table\">\n        <thead>\n          <tr>\n            <th>Descrição</th>\n            <th>Tag</th>\n            <th>Método de pagamento</th>\n            <th>Valor</th>\n            <th>Moeda</th>\n            <th>Câmbio utilizado</th>\n            <th>Valor convertido</th>\n            <th>Moeda de conversão</th>\n            <th>Editar/Excluir</th>\n          </tr>\n        </thead>\n        <tbody>\n          { expenses.length > 0 && expenses\n            .map((expanse, index) => (<ExpanseTable\n              key={ index }\n              data={ expanse }\n            />)) }\n        </tbody>\n      </table>\n    );\n  }\n}\n\nSectionTable.propTypes = {\n  expenses: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n};\n\nexport default SectionTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass ValueDescriptionCoin extends React.Component {\n  renderValueDescriptionCoin(handleChange, value) {\n    return (\n      <div className=\"input-container\">\n        <label className=\"form-label\" htmlFor=\"input-value-id\">\n          Valor:\n          <input\n            className=\"form-control\"\n            id=\"input-value-id\"\n            name=\"value\"\n            onChange={ handleChange }\n            type=\"text\"\n            value={ value }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  render() {\n    const { arrayCurrencies,\n      currency,\n      description,\n      handleChange,\n      value } = this.props;\n    return (\n      <>\n        { this.renderValueDescriptionCoin(handleChange, value) }\n        <div className=\"input-container\">\n          <label className=\"form-label\" htmlFor=\"input-description-id\">\n            Descrição:\n            <input\n              className=\"form-control\"\n              id=\"input-description-id\"\n              name=\"description\"\n              onChange={ handleChange }\n              type=\"text\"\n              value={ description }\n            />\n          </label>\n        </div>\n        <div className=\"input-container\">\n          <label className=\"form-label\" htmlFor=\"input-select-currency-id\">\n            Moeda:\n            <select\n              className=\"form-select\"\n              id=\"input-select-currency-id\"\n              name=\"currency\"\n              onChange={ handleChange }\n              value={ currency }\n            >\n              { arrayCurrencies && arrayCurrencies\n                .filter((removeItem) => removeItem !== 'USDT')\n                .map((item, index) => (\n                  <option\n                    key={ index }\n                    name=\"currency\"\n                    value={ item }\n                  >\n                    { item }\n                  </option>)) }\n            </select>\n          </label>\n        </div>\n      </>\n    );\n  }\n}\n\nValueDescriptionCoin.propTypes = {\n  arrayCurrencies: PropTypes.arrayOf({}),\n}.isRequired;\n\nexport default ValueDescriptionCoin;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { actionRequestCurrencies,\n  actionReceiveQuotation, actionUpadatePurchase } from '../actions/index';\nimport Button from '../components/Button';\nimport SectionTable from '../components/SectionTable';\nimport ValueDescriptionCoin from '../components/ValueDescriptionCoin';\n\nclass Wallet extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      currency: 'USD',\n      description: '',\n      id: 0,\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n      value: '',\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.renderForm = this.renderForm.bind(this);\n    this.renderHeader = this.renderHeader.bind(this);\n    this.setInputstoEdit = this.setInputstoEdit.bind(this);\n    this.updateItems = this.updateItems.bind(this);\n  }\n\n  componentDidMount() {\n    const { requestCurrencies } = this.props;\n    requestCurrencies();\n  }\n\n  componentDidUpdate(nextProps) {\n    const { update } = this.props;\n    if (nextProps.update !== update) {\n      this.setInputstoEdit();\n    }\n  }\n\n  setInputstoEdit() {\n    const { expenses, id } = this.props;\n    const newState = expenses.filter((a) => a.id === id)[0];\n    this.setState({\n      value: newState.value,\n      tag: newState.tag,\n      method: newState.method,\n      currency: newState.currency,\n      description: newState.description,\n    });\n  }\n\n  handleClick() {\n    const { requestQuotation } = this.props;\n    this.setState((prevState) => ({\n      id: prevState.id + 1,\n    }));\n    requestQuotation(this.state);\n    this.setState({\n      currency: 'USD',\n      description: '',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n      value: '',\n    });\n  }\n\n  handleChange({ target: { name, value } }) {\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  returnButton() {\n    const { update, id } = this.props;\n    const addButton = (\n      <Button\n        name=\"Adicionar despesa\"\n        data={ this.state }\n        onClick={ this.handleClick }\n      />\n    );\n\n    const editButton = (\n      <Button\n        name=\"Editar despesa\"\n        data={ this.state }\n        onClick={ () => this.updateItems(id) }\n      />\n    );\n    return update ? editButton : addButton;\n  }\n\n  updateItems(id) {\n    const { value, description, method, tag, currency } = this.state;\n    const { expenses, updatePurchase } = this.props;\n    const update = expenses.reduce((acumulator, currentValue) => {\n      if (currentValue.id === id) {\n        return [...acumulator,\n          { id,\n            value,\n            description,\n            currency,\n            method,\n            tag,\n            exchangeRates: currentValue.exchangeRates }];\n      }\n      return [...acumulator, currentValue];\n    }, []);\n    updatePurchase(update);\n    this.setState({\n      currency: 'USD',\n      description: '',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n      value: '',\n    });\n  }\n\n  renderPayMethod(handleChange, method) {\n    return (\n      <div className=\"input-container\">\n        <label className=\"form-label\" htmlFor=\"input-select-payment-type-id\">\n          Método de pagamento:\n          <select\n            className=\"form-select\"\n            id=\"input-select-payment-type-id\"\n            name=\"method\"\n            onChange={ handleChange }\n            value={ method }\n          >\n            <option name=\"method\" value=\"Dinheiro\">Dinheiro</option>\n            <option name=\"method\" value=\"Cartão de crédito\">Cartão de crédito</option>\n            <option name=\"method\" value=\"Cartão de débito\">Cartão de débito</option>\n          </select>\n        </label>\n      </div>\n    );\n  }\n\n  renderForm() {\n    const { currency, description, method, tag, value } = this.state;\n    const { currencies } = this.props;\n    return (\n      <form className=\"form-class\">\n        <ValueDescriptionCoin\n          arrayCurrencies={ currencies }\n          currency={ currency }\n          description={ description }\n          handleChange={ this.handleChange }\n          value={ value }\n        />\n        { this.renderPayMethod(this.handleChange, method) }\n        <div className=\"input-container\">\n          <label className=\"form-label\" htmlFor=\"input-select-tag-id\">\n            Tag:\n            <select\n              className=\"form-select\"\n              id=\"input-select-tag-id\"\n              name=\"tag\"\n              onChange={ this.handleChange }\n              value={ tag }\n            >\n              <option name=\"tag\" value=\"Alimentação\">Alimentação</option>\n              <option name=\"tag\" value=\"Lazer\">Lazer</option>\n              <option name=\"tag\" value=\"Trabalho\">Trabalho</option>\n              <option name=\"tag\" value=\"Transporte\">Transporte</option>\n              <option name=\"tag\" value=\"Saúde\">Saúde</option>\n            </select>\n          </label>\n        </div>\n        { this.returnButton() }\n      </form>\n    );\n  }\n\n  renderHeader() {\n    const { email, totalAmount } = this.props;\n    return (\n      <header className=\"header\">\n        <div className=\"header-item\">\n          <p className=\"email-class\" data-testid=\"email-field\">\n            Usuário atual\n          </p>\n          <span className=\"span-header-user\">{ email }</span>\n        </div>\n        <div className=\"header-item\">\n          <p data-testid=\"total-field\">\n            Total das despesas\n          </p>\n          <span\n            className=\"span-header\"\n          >\n            { `R$${parseFloat(totalAmount).toFixed(2)}` }\n          </span>\n        </div>\n        <div className=\"header-item\">\n          <p data-testid=\"header-currency-field\">Câmbio utilizado</p>\n          <span className=\"span-header-brl\">BRL</span>\n        </div>\n      </header>\n    );\n  }\n\n  render() {\n    const { expenses } = this.props;\n    return (\n      <main>\n        { this.renderHeader() }\n        { this.renderForm() }\n        <SectionTable expenses={ expenses } />\n      </main>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  currencies: state.wallet.currencies,\n  email: state.user.email,\n  expenses: state.wallet.expenses,\n  exchangeRates: state.wallet.expenses,\n  totalAmount: state.wallet.expenses\n    .reduce((\n      accumulator,\n      { value, currency, exchangeRates },\n    ) => accumulator + (parseFloat(exchangeRates[currency].ask) * value), 0),\n  update: state.wallet.update,\n  id: state.wallet.id,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  requestQuotation: (state) => (\n    dispatch(actionReceiveQuotation(state))),\n  requestCurrencies: () => dispatch(actionRequestCurrencies()),\n  updatePurchase: (state) => dispatch(actionUpadatePurchase(state)),\n});\n\nWallet.propTypes = {\n  currencies: PropTypes.arrayOf(PropTypes.shape).isRequired,\n  email: PropTypes.string,\n  expenses: PropTypes.arrayOf(PropTypes.shape).isRequired,\n  id: PropTypes.number,\n  requestCurrencies: PropTypes.func.isRequired,\n  requestQuotation: PropTypes.func.isRequired,\n  totalAmount: PropTypes.number.isRequired,\n  update: PropTypes.bool,\n  updatePurchase: PropTypes.func.isRequired,\n};\n\nWallet.defaultProps = {\n  email: '',\n  id: 0,\n  update: false,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet);\n","import React from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <Route\n          path=\"/carteira\"\n          render={ () => (\n            <Wallet />\n          ) }\n        />\n        <Route\n          exact\n          path=\"/\"\n          render={ () => (\n            <Login />\n          ) }\n        />\n      </Switch>\n      </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}